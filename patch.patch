From 7ab25e8afcd469ab9ea884af48a102e1f713dc1d Mon Sep 17 00:00:00 2001
From: Gamer64 <76565986+Gamer64ytb@users.noreply.github.com>
Date: Wed, 26 Jun 2024 17:48:44 +0200
Subject: [PATCH] android: Gamepads can now control the in-game menu

Co-Authored-By: OpenSauce <opensauce04@gmail.com>
---
 .../citra_emu/activities/EmulationActivity.kt | 23 +++++++++++++------
 .../citra_emu/fragments/EmulationFragment.kt  | 10 ++++++++
 .../shader/generator/spv_shader_gen.cpp       |  2 +-
 3 files changed, 27 insertions(+), 8 deletions(-)

diff --git a/src/android/app/src/main/java/org/citra/citra_emu/activities/EmulationActivity.kt b/src/android/app/src/main/java/org/citra/citra_emu/activities/EmulationActivity.kt
index 17a5b677b..119188d07 100644
--- a/src/android/app/src/main/java/org/citra/citra_emu/activities/EmulationActivity.kt
+++ b/src/android/app/src/main/java/org/citra/citra_emu/activities/EmulationActivity.kt
@@ -38,6 +38,7 @@ import org.citra.citra_emu.features.settings.model.IntSetting
 import org.citra.citra_emu.features.settings.model.BooleanSetting
 import org.citra.citra_emu.features.settings.model.SettingsViewModel
 import org.citra.citra_emu.features.settings.model.view.InputBindingSetting
+import org.citra.citra_emu.fragments.EmulationFragment
 import org.citra.citra_emu.fragments.MessageDialogFragment
 import org.citra.citra_emu.utils.ControllerMappingHelper
 import org.citra.citra_emu.utils.EmulationLifecycleUtil
@@ -52,14 +53,20 @@ class EmulationActivity : AppCompatActivity() {
         get() = PreferenceManager.getDefaultSharedPreferences(CitraApplication.appContext)
     private var foregroundService: Intent? = null
     var isActivityRecreated = false
-
-    private val settingsViewModel: SettingsViewModel by viewModels()
     private val emulationViewModel: EmulationViewModel by viewModels()
+    private val settingsViewModel: SettingsViewModel by viewModels()
 
     private lateinit var binding: ActivityEmulationBinding
     private lateinit var screenAdjustmentUtil: ScreenAdjustmentUtil
     private lateinit var hotkeyUtility: HotkeyUtility
 
+    private val emulationFragment: EmulationFragment
+        get() {
+            val navHostFragment =
+                supportFragmentManager.findFragmentById(R.id.fragment_container) as NavHostFragment
+            return navHostFragment.getChildFragmentManager().fragments.last() as EmulationFragment
+        }
+
     private var isEmulationRunning: Boolean = false
 
     override fun onCreate(savedInstanceState: Bundle?) {
@@ -224,6 +231,10 @@ class EmulationActivity : AppCompatActivity() {
             return false
         }
 
+        if (emulationFragment.isDrawerOpen()) {
+            return super.dispatchKeyEvent(event)
+        }
+
         val button =
             preferences.getInt(InputBindingSetting.getInputButtonKey(event.keyCode), event.keyCode)
         val action: Int = when (event.action) {
@@ -262,11 +273,9 @@ class EmulationActivity : AppCompatActivity() {
 
     override fun dispatchGenericMotionEvent(event: MotionEvent): Boolean {
         // TODO: Move this check into native code - prevents crash if input pressed before starting emulation
-        if (!NativeLibrary.isRunning()) {
-            return super.dispatchGenericMotionEvent(event)
-        }
-
-        if (event.source and InputDevice.SOURCE_CLASS_JOYSTICK == 0) {
+        if (!NativeLibrary.isRunning() ||
+            (event.source and InputDevice.SOURCE_CLASS_JOYSTICK == 0) ||
+            emulationFragment.isDrawerOpen()) {
             return super.dispatchGenericMotionEvent(event)
         }
 
diff --git a/src/android/app/src/main/java/org/citra/citra_emu/fragments/EmulationFragment.kt b/src/android/app/src/main/java/org/citra/citra_emu/fragments/EmulationFragment.kt
index 794e964a0..ab675b6d7 100644
--- a/src/android/app/src/main/java/org/citra/citra_emu/fragments/EmulationFragment.kt
+++ b/src/android/app/src/main/java/org/citra/citra_emu/fragments/EmulationFragment.kt
@@ -196,6 +196,9 @@ class EmulationFragment : Fragment(), SurfaceHolder.Callback, Choreographer.Fram
                     emulationState.pause()
                 }
                 binding.drawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_UNLOCKED)
+                binding.surfaceInputOverlay.isClickable = false
+                binding.surfaceInputOverlay.isFocusable = false
+                binding.surfaceInputOverlay.isFocusableInTouchMode = false
             }
 
             override fun onDrawerClosed(drawerView: View) {
@@ -203,6 +206,9 @@ class EmulationFragment : Fragment(), SurfaceHolder.Callback, Choreographer.Fram
                     emulationState.unpause()
                 }
                 binding.drawerLayout.setDrawerLockMode(EmulationMenuSettings.drawerLockMode)
+                binding.surfaceInputOverlay.isClickable = true
+                binding.surfaceInputOverlay.isFocusable = true
+                binding.surfaceInputOverlay.isFocusableInTouchMode = true
             }
 
             override fun onDrawerStateChanged(newState: Int) {
@@ -425,6 +431,10 @@ class EmulationFragment : Fragment(), SurfaceHolder.Callback, Choreographer.Fram
         }
     }
 
+    fun isDrawerOpen(): Boolean {
+        return binding.drawerLayout.isOpen
+    }
+
     private fun togglePause() {
         if (emulationState.isPaused) {
             emulationState.unpause()
diff --git a/src/video_core/shader/generator/spv_shader_gen.cpp b/src/video_core/shader/generator/spv_shader_gen.cpp
index b22c40c70..43491977f 100644
--- a/src/video_core/shader/generator/spv_shader_gen.cpp
+++ b/src/video_core/shader/generator/spv_shader_gen.cpp
@@ -2,10 +2,10 @@
 // Licensed under GPLv2 or any later version
 // Refer to the license.txt file included.
 
+#include "common/settings.h"
 #include "video_core/pica/regs_rasterizer.h"
 #include "video_core/shader/generator/shader_gen.h"
 #include "video_core/shader/generator/spv_shader_gen.h"
-#include "common/settings.h"
 
 using VSOutputAttributes = Pica::RasterizerRegs::VSOutputAttributes;
 
