From b4503bab59dfb40994b30fbd5393a752a5b3d394 Mon Sep 17 00:00:00 2001
From: Gamer64ytb <76565986+Gamer64ytb@users.noreply.github.com>
Date: Tue, 23 Apr 2024 09:05:02 +0200
Subject: [PATCH] Android: add rotate screen toggle, Android haptic feedback
 (gperrio)

Co-Authored-By: gperrio <20833261+gperrio@users.noreply.github.com>
---
 .../citra_emu/fragments/EmulationFragment.kt  | 25 +++++++++++++++++++
 .../citra/citra_emu/overlay/InputOverlay.kt   | 11 +++++---
 .../overlay/InputOverlayDrawableButton.kt     |  5 +++-
 .../overlay/InputOverlayDrawableDpad.kt       | 15 +++++++++--
 .../overlay/InputOverlayDrawableJoystick.kt   | 20 ++++++++++++++-
 .../citra_emu/utils/EmulationMenuSettings.kt  | 11 ++++++--
 .../app/src/main/res/menu/menu_in_game.xml    |  5 ++++
 .../main/res/menu/menu_overlay_options.xml    |  5 ++++
 .../app/src/main/res/values-es/strings.xml    |  2 ++
 .../app/src/main/res/values/strings.xml       |  2 ++
 10 files changed, 92 insertions(+), 9 deletions(-)

diff --git a/src/android/app/src/main/java/org/citra/citra_emu/fragments/EmulationFragment.kt b/src/android/app/src/main/java/org/citra/citra_emu/fragments/EmulationFragment.kt
index dcc2fb9eb..bb7c64735 100644
--- a/src/android/app/src/main/java/org/citra/citra_emu/fragments/EmulationFragment.kt
+++ b/src/android/app/src/main/java/org/citra/citra_emu/fragments/EmulationFragment.kt
@@ -20,6 +20,7 @@ import android.view.Surface
 import android.view.SurfaceHolder
 import android.view.View
 import android.view.ViewGroup
+import android.content.res.Configuration;
 import android.widget.PopupMenu
 import android.widget.TextView
 import android.widget.Toast
@@ -36,6 +37,7 @@ import androidx.fragment.app.viewModels
 import androidx.lifecycle.Lifecycle
 import androidx.lifecycle.lifecycleScope
 import androidx.lifecycle.repeatOnLifecycle
+import android.content.pm.ActivityInfo
 import androidx.navigation.findNavController
 import androidx.navigation.fragment.navArgs
 import androidx.preference.PreferenceManager
@@ -255,6 +257,11 @@ class EmulationFragment : Fragment(), SurfaceHolder.Callback, Choreographer.Fram
                     true
                 }
 
+                R.id.menu_rotate_screen -> {
+                    rotateScreen()
+                    true
+                }
+
                 R.id.menu_amiibo -> {
                     showAmiiboMenu()
                     true
@@ -412,6 +419,16 @@ class EmulationFragment : Fragment(), SurfaceHolder.Callback, Choreographer.Fram
         setInsets()
     }
 
+    private fun rotateScreen() {
+        if (resources.configuration.orientation == Configuration.ORIENTATION_PORTRAIT) {
+            (context as? EmulationActivity)?.requestedOrientation = ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE
+        } else if (resources.configuration.orientation == Configuration.ORIENTATION_LANDSCAPE) {
+            (context as? EmulationActivity)?.requestedOrientation = ActivityInfo.SCREEN_ORIENTATION_PORTRAIT
+        } else {
+            (context as? EmulationActivity)?.requestedOrientation = ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED
+        }
+    }
+
     private fun togglePause() {
         if(emulationState.isPaused) {
             emulationState.unpause()
@@ -581,6 +598,7 @@ class EmulationFragment : Fragment(), SurfaceHolder.Callback, Choreographer.Fram
         popupMenu.menu.apply {
             findItem(R.id.menu_show_overlay).isChecked = EmulationMenuSettings.showOverlay
             findItem(R.id.menu_show_fps).isChecked = EmulationMenuSettings.showFps
+            findItem(R.id.menu_haptic_feedback).isChecked = EmulationMenuSettings.hapticFeedback
             findItem(R.id.menu_emulation_joystick_rel_center).isChecked =
                 EmulationMenuSettings.joystickRelCenter
             findItem(R.id.menu_emulation_dpad_slide_enable).isChecked =
@@ -601,6 +619,13 @@ class EmulationFragment : Fragment(), SurfaceHolder.Callback, Choreographer.Fram
                     true
                 }
 
+                R.id.menu_haptic_feedback -> {
+                    EmulationMenuSettings.hapticFeedback = !EmulationMenuSettings.hapticFeedback
+                    // wtf
+                    updateShowFpsOverlay()
+                    true
+                }
+
                 R.id.menu_emulation_edit_layout -> {
                     editControlsPlacement()
                     binding.drawerLayout.close()
diff --git a/src/android/app/src/main/java/org/citra/citra_emu/overlay/InputOverlay.kt b/src/android/app/src/main/java/org/citra/citra_emu/overlay/InputOverlay.kt
index b469213c1..8b3ea6360 100644
--- a/src/android/app/src/main/java/org/citra/citra_emu/overlay/InputOverlay.kt
+++ b/src/android/app/src/main/java/org/citra/citra_emu/overlay/InputOverlay.kt
@@ -76,20 +76,25 @@ class InputOverlay(context: Context?, attrs: AttributeSet?) : SurfaceView(contex
         overlayJoysticks.forEach { it.draw(canvas) }
     }
 
+    fun hapticFeedback(type:Int) {
+        if (EmulationMenuSettings.hapticFeedback)
+            performHapticFeedback(type)
+    }
+
     override fun onTouch(v: View, event: MotionEvent): Boolean {
         if (isInEditMode) {
             return onTouchWhileEditing(event)
         }
         var shouldUpdateView = false
         for (button in overlayButtons) {
-            if (!button.updateStatus(event)) {
+            if (!button.updateStatus(event), this) {
                 continue
             }
             NativeLibrary.onGamePadEvent(NativeLibrary.TouchScreenDevice, button.id, button.status)
             shouldUpdateView = true
         }
         for (dpad in overlayDpads) {
-            if (!dpad.updateStatus(event, EmulationMenuSettings.dpadSlide)) {
+            if (!dpad.updateStatus(event, EmulationMenuSettings.dpadSlide), this) {
                 continue
             }
             NativeLibrary.onGamePadEvent(NativeLibrary.TouchScreenDevice, dpad.upId, dpad.upStatus)
@@ -111,7 +116,7 @@ class InputOverlay(context: Context?, attrs: AttributeSet?) : SurfaceView(contex
             shouldUpdateView = true
         }
         for (joystick in overlayJoysticks) {
-            if (!joystick.updateStatus(event)) {
+            if (!joystick.updateStatus(event), this) {
                 continue
             }
             val axisID = joystick.joystickId
diff --git a/src/android/app/src/main/java/org/citra/citra_emu/overlay/InputOverlayDrawableButton.kt b/src/android/app/src/main/java/org/citra/citra_emu/overlay/InputOverlayDrawableButton.kt
index 7de769e12..1fcb2bd06 100644
--- a/src/android/app/src/main/java/org/citra/citra_emu/overlay/InputOverlayDrawableButton.kt
+++ b/src/android/app/src/main/java/org/citra/citra_emu/overlay/InputOverlayDrawableButton.kt
@@ -9,6 +9,7 @@ import android.graphics.Bitmap
 import android.graphics.Canvas
 import android.graphics.Rect
 import android.graphics.drawable.BitmapDrawable
+import android.view.HapticFeedbackConstants
 import android.view.MotionEvent
 import org.citra.citra_emu.NativeLibrary
 
@@ -53,7 +54,7 @@ class InputOverlayDrawableButton(
      *
      * @return true if value was changed
      */
-    fun updateStatus(event: MotionEvent): Boolean {
+    fun updateStatus(event: MotionEvent, overlay:InputOverlay): Boolean {
         val pointerIndex = event.actionIndex
         val xPosition = event.getX(pointerIndex).toInt()
         val yPosition = event.getY(pointerIndex).toInt()
@@ -69,6 +70,7 @@ class InputOverlayDrawableButton(
             }
             pressedState = true
             trackId = pointerId
+            overlay.hapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY)
             return true
         }
         if (isActionUp) {
@@ -77,6 +79,7 @@ class InputOverlayDrawableButton(
             }
             pressedState = false
             trackId = -1
+            overlay.hapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY_RELEASE)
             return true
         }
         return false
diff --git a/src/android/app/src/main/java/org/citra/citra_emu/overlay/InputOverlayDrawableDpad.kt b/src/android/app/src/main/java/org/citra/citra_emu/overlay/InputOverlayDrawableDpad.kt
index d38f343d6..994454208 100644
--- a/src/android/app/src/main/java/org/citra/citra_emu/overlay/InputOverlayDrawableDpad.kt
+++ b/src/android/app/src/main/java/org/citra/citra_emu/overlay/InputOverlayDrawableDpad.kt
@@ -61,7 +61,8 @@ class InputOverlayDrawableDpad(
         trackId = -1
     }
 
-    fun updateStatus(event: MotionEvent, dpadSlide: Boolean): Boolean {
+    fun updateStatus(event: MotionEvent, dpadSlide: Boolean, overlay: InputOverlay): Boolean {
+        var isDown = false
         val pointerIndex = event.actionIndex
         val xPosition = event.getX(pointerIndex).toInt()
         val yPosition = event.getY(pointerIndex).toInt()
@@ -75,6 +76,7 @@ class InputOverlayDrawableDpad(
             if (!bounds.contains(xPosition, yPosition)) {
                 return false
             }
+            isDown = true
             trackId = pointerId
         }
         if (isActionUp) {
@@ -86,6 +88,7 @@ class InputOverlayDrawableDpad(
             downButtonState = false
             leftButtonState = false
             rightButtonState = false
+            overlay.hapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY_RELEASE)
             return true
         }
         if (trackId == -1) {
@@ -116,7 +119,15 @@ class InputOverlayDrawableDpad(
             downButtonState = yAxis > VIRT_AXIS_DEADZONE
             leftButtonState = xAxis < -VIRT_AXIS_DEADZONE
             rightButtonState = xAxis > VIRT_AXIS_DEADZONE
-            return upState != upButtonState || downState != downButtonState || leftState != leftButtonState || rightState != rightButtonState
+
+            val stateChanged = upState != upButtonState || downState != downButtonState || leftState != leftButtonState || rightState != rightButtonState
+
+            if (stateChanged)
+                overlay.hapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY)
+            else if (isDown)
+                overlay.hapticFeedback(HapticFeedbackConstants.CLOCK_TICK)
+
+            return stateChanged
         }
         return false
     }
diff --git a/src/android/app/src/main/java/org/citra/citra_emu/overlay/InputOverlayDrawableJoystick.kt b/src/android/app/src/main/java/org/citra/citra_emu/overlay/InputOverlayDrawableJoystick.kt
index ddc2d2ef9..efb76ed9f 100644
--- a/src/android/app/src/main/java/org/citra/citra_emu/overlay/InputOverlayDrawableJoystick.kt
+++ b/src/android/app/src/main/java/org/citra/citra_emu/overlay/InputOverlayDrawableJoystick.kt
@@ -9,6 +9,7 @@ import android.graphics.Bitmap
 import android.graphics.Canvas
 import android.graphics.Rect
 import android.graphics.drawable.BitmapDrawable
+import android.view.HapticFeedbackConstants
 import android.view.MotionEvent
 import org.citra.citra_emu.NativeLibrary
 import org.citra.citra_emu.utils.EmulationMenuSettings
@@ -43,6 +44,8 @@ class InputOverlayDrawableJoystick(
     var trackId = -1
     var xAxis = 0f
     var yAxis = 0f
+    var angle = 0f
+    var radius = 0f
     private var controlPositionX = 0
     private var controlPositionY = 0
     private var previousTouchX = 0
@@ -90,7 +93,7 @@ class InputOverlayDrawableJoystick(
         boundsBoxBitmap.draw(canvas)
     }
 
-    fun updateStatus(event: MotionEvent): Boolean {
+    fun updateStatus(event: MotionEvent, overlay: InputOverlay): Boolean {
         val pointerIndex = event.actionIndex
         val xPosition = event.getX(pointerIndex).toInt()
         val yPosition = event.getY(pointerIndex).toInt()
@@ -115,6 +118,7 @@ class InputOverlayDrawableJoystick(
             }
             boundsBoxBitmap.bounds = virtBounds
             trackId = pointerId
+            overlay.hapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY)
         }
         if (isActionUp) {
             if (trackId != pointerId) {
@@ -123,12 +127,15 @@ class InputOverlayDrawableJoystick(
             pressedState = false
             xAxis = 0.0f
             yAxis = 0.0f
+            angle = 0.0f
+            radius = 0.0f
             outerBitmap.alpha = opacity
             boundsBoxBitmap.alpha = 0
             virtBounds = Rect(origBounds.left, origBounds.top, origBounds.right, origBounds.bottom)
             bounds = Rect(origBounds.left, origBounds.top, origBounds.right, origBounds.bottom)
             setInnerBounds()
             trackId = -1
+            overlay.hapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY_RELEASE)
             return true
         }
         if (trackId == -1) return false
@@ -148,6 +155,8 @@ class InputOverlayDrawableJoystick(
             val yAxis = touchY / maxY
             val oldXAxis = this.xAxis
             val oldYAxis = this.yAxis
+            val oldAngle = this.angle
+            val oldRadius = this.radius
 
             // Clamp the circle pad input to a circle
             val angle = atan2(yAxis.toDouble(), xAxis.toDouble()).toFloat()
@@ -158,6 +167,15 @@ class InputOverlayDrawableJoystick(
             this.xAxis = cos(angle.toDouble()).toFloat() * radius
             this.yAxis = sin(angle.toDouble()).toFloat() * radius
             setInnerBounds()
+
+            if (kotlin.math.abs(oldRadius - radius) > .34f
+                    || radius > .5f && kotlin.math.abs(oldAngle - angle) > kotlin.math.PI / 8) {
+                this.radius = radius
+                this.angle = angle
+
+                overlay.hapticFeedback(HapticFeedbackConstants.CLOCK_TICK)
+            }
+
             return oldXAxis != this.xAxis && oldYAxis != this.yAxis
         }
         return false
diff --git a/src/android/app/src/main/java/org/citra/citra_emu/utils/EmulationMenuSettings.kt b/src/android/app/src/main/java/org/citra/citra_emu/utils/EmulationMenuSettings.kt
index 05804551e..05cace785 100644
--- a/src/android/app/src/main/java/org/citra/citra_emu/utils/EmulationMenuSettings.kt
+++ b/src/android/app/src/main/java/org/citra/citra_emu/utils/EmulationMenuSettings.kt
@@ -41,8 +41,15 @@ object EmulationMenuSettings {
         get() = preferences.getBoolean("EmulationMenuSettings_ShowFps", false)
         set(value) {
             preferences.edit()
-                .putBoolean("EmulationMenuSettings_ShowFps", value)
-                .apply()
+                    .putBoolean("EmulationMenuSettings_ShowFps", value)
+                    .apply()
+        }
+    var hapticFeedback: Boolean
+        get() = preferences.getBoolean("EmulationMenuSettings_HapticFeedback", true)
+        set(value) {
+            preferences.edit()
+                    .putBoolean("EmulationMenuSettings_HapticFeedback", value)
+                    .apply()
         }
     var swapScreens: Boolean
         get() = preferences.getBoolean("EmulationMenuSettings_SwapScreens", false)
diff --git a/src/android/app/src/main/res/menu/menu_in_game.xml b/src/android/app/src/main/res/menu/menu_in_game.xml
index 56bb99ed2..450a0fcb6 100644
--- a/src/android/app/src/main/res/menu/menu_in_game.xml
+++ b/src/android/app/src/main/res/menu/menu_in_game.xml
@@ -17,6 +17,11 @@
         android:icon="@drawable/ic_controller"
         android:title="@string/emulation_overlay_options" />
 
+    <item
+        android:id="@+id/menu_rotate_screen"
+        android:icon="@drawable/ic_fit_screen"
+        android:title="@string/emulation_rotate_screen" />
+
     <item
         android:id="@+id/menu_amiibo"
         android:icon="@drawable/ic_nfc"
diff --git a/src/android/app/src/main/res/menu/menu_overlay_options.xml b/src/android/app/src/main/res/menu/menu_overlay_options.xml
index ffa649b33..e80f17c79 100644
--- a/src/android/app/src/main/res/menu/menu_overlay_options.xml
+++ b/src/android/app/src/main/res/menu/menu_overlay_options.xml
@@ -11,6 +11,11 @@
         android:title="@string/emulation_show_fps"
         android:checkable="true" />
 
+    <item
+        android:id="@+id/menu_haptic_feedback"
+        android:title="@string/emulation_haptic_feedback"
+        android:checkable="true" />
+
     <item
         android:id="@+id/menu_emulation_edit_layout"
         android:title="@string/emulation_edit_layout" />
diff --git a/src/android/app/src/main/res/values-es/strings.xml b/src/android/app/src/main/res/values-es/strings.xml
index d0b955c81..81a4ebe1d 100644
--- a/src/android/app/src/main/res/values-es/strings.xml
+++ b/src/android/app/src/main/res/values-es/strings.xml
@@ -309,10 +309,12 @@ Se esperan fallos gráficos temporales cuando ésta esté activado.</string>
     <string name="emulation_empty_state_slot">Estado %1$d</string>
     <string name="emulation_occupied_state_slot">Estado %1$d - %2$tF %2$tR</string>
     <string name="emulation_show_fps">Mostrar FPS</string>
+    <string name="emulation_haptic_feedback">Respuesta Háptica</string>
     <string name="emulation_overlay_options">Opciones de estilo</string>
     <string name="emulation_configure_controls">Configurar Controles</string>
     <string name="emulation_edit_layout">Editar Estilo</string>
     <string name="emulation_done">Hecho</string>
+    <string name="emulation_rotate_screen">Rotar Pantalla</string>
     <string name="emulation_toggle_controls">Activar Controles</string>
     <string name="emulation_control_scale">Ajustar Escala</string>
     <string name="emulation_control_opacity">Ajustar Opacidad</string>
diff --git a/src/android/app/src/main/res/values/strings.xml b/src/android/app/src/main/res/values/strings.xml
index 8a009fb7a..d761da20d 100644
--- a/src/android/app/src/main/res/values/strings.xml
+++ b/src/android/app/src/main/res/values/strings.xml
@@ -323,10 +323,12 @@
     <string name="emulation_empty_state_slot">Slot %1$d</string>
     <string name="emulation_occupied_state_slot">Slot %1$d - %2$tF %2$tR</string>
     <string name="emulation_show_fps">Show FPS</string>
+    <string name="emulation_haptic_feedback">Haptic Feedback</string>
     <string name="emulation_overlay_options">Overlay Options</string>
     <string name="emulation_configure_controls">Configure Controls</string>
     <string name="emulation_edit_layout">Edit Layout</string>
     <string name="emulation_done">Done</string>
+    <string name="emulation_rotate_screen">Rotate Screen</string>
     <string name="emulation_toggle_controls">Toggle Controls</string>
     <string name="emulation_control_scale">Adjust Scale</string>
     <string name="emulation_control_opacity">Adjust Opacity</string>
