From 1e4a148efb85b6bd25a7314abd43c0ed0fd6d121 Mon Sep 17 00:00:00 2001
From: Gamer64ytb <76565986+Gamer64ytb@users.noreply.github.com>
Date: Thu, 25 Apr 2024 16:23:54 +0200
Subject: [PATCH] Move game_settings to core.cpp to apply for PC too

Mostly like Citra MMJ does
---
 src/android/app/src/main/jni/CMakeLists.txt   |  2 -
 .../app/src/main/jni/game_settings.cpp        | 45 ---------------
 src/android/app/src/main/jni/game_settings.h  | 11 ----
 src/core/core.cpp                             | 56 +++++++++++++++++--
 5 files changed, 51 insertions(+), 79 deletions(-)
 delete mode 100644 src/android/app/src/main/jni/game_settings.cpp
 delete mode 100644 src/android/app/src/main/jni/game_settings.h

diff --git a/src/android/app/src/main/jni/CMakeLists.txt b/src/android/app/src/main/jni/CMakeLists.txt
index 233d568ed..b739dbec8 100644
--- a/src/android/app/src/main/jni/CMakeLists.txt
+++ b/src/android/app/src/main/jni/CMakeLists.txt
@@ -20,8 +20,6 @@ add_library(citra-android SHARED
     emu_window/emu_window.cpp
     emu_window/emu_window.h
     game_info.cpp
-    game_settings.cpp
-    game_settings.h
     id_cache.cpp
     id_cache.h
     native.cpp
diff --git a/src/android/app/src/main/jni/game_settings.cpp b/src/android/app/src/main/jni/game_settings.cpp
deleted file mode 100644
index d8382b0e1..000000000
--- a/src/android/app/src/main/jni/game_settings.cpp
+++ /dev/null
@@ -1,45 +0,0 @@
-// Copyright 2019 Citra Emulator Project
-// Licensed under GPLv2 or any later version
-// Refer to the license.txt file included.
-
-#include "common/settings.h"
-
-namespace GameSettings {
-
-void LoadOverrides(u64 program_id) {
-    switch (program_id) {
-        // JAP / The Legend of Zelda: Ocarina of Time 3D
-    case 0x0004000000033400:
-        // USA / The Legend of Zelda: Ocarina of Time 3D
-    case 0x0004000000033500:
-        // EUR / The Legend of Zelda: Ocarina of Time 3D
-    case 0x0004000000033600:
-        // KOR / The Legend of Zelda: Ocarina of Time 3D
-    case 0x000400000008F800:
-        // CHI / The Legend of Zelda: Ocarina of Time 3D
-    case 0x000400000008F900:
-        // This game requires accurate multiplication to render properly
-        Settings::values.shaders_accurate_mul = true;
-        break;
-
-        // USA / Mario & Luigi: Superstar Saga + Bowsers Minions
-    case 0x00040000001B8F00:
-        // EUR / Mario & Luigi: Superstar Saga + Bowsers Minions
-    case 0x00040000001B9000:
-        // JAP / Mario & Luigi: Superstar Saga + Bowsers Minions
-    case 0x0004000000194B00:
-        // This game requires accurate multiplication to render properly
-        Settings::values.shaders_accurate_mul = true;
-        break;
-
-        // USA / Mario & Luigi: Bowsers Inside Story + Bowser Jrs Journey
-    case 0x00040000001D1400:
-        // EUR / Mario & Luigi: Bowsers Inside Story + Bowser Jrs Journey
-    case 0x00040000001D1500:
-        // This game requires accurate multiplication to render properly
-        Settings::values.shaders_accurate_mul = true;
-        break;
-    }
-}
-
-} // namespace GameSettings
diff --git a/src/android/app/src/main/jni/game_settings.h b/src/android/app/src/main/jni/game_settings.h
deleted file mode 100644
index b034e1865..000000000
--- a/src/android/app/src/main/jni/game_settings.h
+++ /dev/null
@@ -1,11 +0,0 @@
-// Copyright 2020 Citra Emulator Project
-// Licensed under GPLv2 or any later version
-// Refer to the license.txt file included.
-
-#include "common/common_types.h"
-
-namespace GameSettings {
-
-void LoadOverrides(u64 program_id);
-
-} // namespace GameSettings
diff --git a/src/core/core.cpp b/src/core/core.cpp
index 3db61dfcd..c00dbe8aa 100644
--- a/src/core/core.cpp
+++ b/src/core/core.cpp
@@ -253,6 +253,51 @@ System::ResultStatus System::SingleStep() {
     return RunLoop(false);
 }
 
+static void LoadOverrides(u64 title_id) {
+    // This gamelist may improve performance or fix issues using the hacks
+    if (title_id == 0x0004000000068B00 || title_id == 0x0004000000061300 ||
+        title_id == 0x000400000004A700 || title_id == 0x000400000005D700) {
+        // Tales of the Abyss / Pac Man Party 3D
+        Settings::values.skip_slow_draw = true;
+    } else if (title_id == 0x000400000015CB00) {
+        // New Atelier Rorona
+        Settings::values.skip_slow_draw = true;
+    } else if (title_id == 0x000400000018E900) {
+        // My Hero Academia
+        Settings::values.skip_slow_draw = true;
+    } else if (title_id == 0x000400000016AD00) {
+        // Dragon Quest Monsters Joker 3
+        Settings::values.skip_slow_draw = true;
+    } else if (title_id == 0x00040000001ACB00) {
+        // Dragon Quest Monsters Joker 3 Professional
+        Settings::values.skip_slow_draw = true;
+    } else if (title_id == 0x000400000008B400 || title_id == 0x0004000000030600 ||
+               title_id == 0x0004000000030800 || title_id == 0x0004000000030700) {
+        // Mario Kart 7
+        Settings::values.skip_texture_copy = true;
+    }
+
+    // This gamelist requires accurate multiplication to render properly
+    const std::array<u64, 10> accurate_mul_ids = {
+        0x0004000000033400, // The Legend of Zelda: Ocarina of Time 3D
+        0x0004000000033500, // The Legend of Zelda: Ocarina of Time 3D
+        0x0004000000033600, // The Legend of Zelda: Ocarina of Time 3D
+        0x000400000008F800, // The Legend of Zelda: Ocarina of Time 3D
+        0x000400000008F900, // The Legend of Zelda: Ocarina of Time 3D
+        0x00040000001B8F00, // Mario & Luigi: Superstar Saga + Bowsers Minions
+        0x00040000001B9000, // Mario & Luigi: Superstar Saga + Bowsers Minions
+        0x0004000000194B00, // Mario & Luigi: Superstar Saga + Bowsers Minions
+        0x00040000001D1400, // Mario & Luigi: Bowsers Inside Story + Bowser Jrs Journey
+        0x00040000001D1500, // Mario & Luigi: Bowsers Inside Story + Bowser Jrs Journey
+    };
+    for (auto id : accurate_mul_ids) {
+        if (title_id == id) {
+            Settings::values.shaders_accurate_mul = true;
+            break;
+        }
+    }
+}
+
 System::ResultStatus System::Load(Frontend::EmuWindow& emu_window, const std::string& filepath,
                                   Frontend::EmuWindow* secondary_window) {
     FileUtil::SetCurrentRomPath(filepath);
@@ -291,6 +336,12 @@ System::ResultStatus System::Load(Frontend::EmuWindow& emu_window, const std::st
         }
     }
 
+    title_id = 0;
+    if (app_loader->ReadProgramId(title_id) != Loader::ResultStatus::Success) {
+        LOG_ERROR(Core, "Failed to find title id for ROM");
+    }
+    LoadOverrides(title_id);
+
     ASSERT(memory_mode.first);
     auto n3ds_hw_caps = app_loader->LoadNew3dsHwCapabilities();
     ASSERT(n3ds_hw_caps.first);
@@ -339,11 +390,6 @@ System::ResultStatus System::Load(Frontend::EmuWindow& emu_window, const std::st
         }
     }
     kernel->SetCurrentProcess(process);
-    title_id = 0;
-    if (app_loader->ReadProgramId(title_id) != Loader::ResultStatus::Success) {
-        LOG_ERROR(Core, "Failed to find title id for ROM (Error {})",
-                  static_cast<u32>(load_result));
-    }
 
     cheat_engine.LoadCheatFile(title_id);
     cheat_engine.Connect();
